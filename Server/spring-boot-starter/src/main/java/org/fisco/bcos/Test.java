package org.fisco.bcos;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Test extends Contract {
    public static String BINARY = "608060405234801561001057600080fd5b5060017343c4d4fe096740dfa1c7ebd186246dc785e238d390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600173c75698618c5f890f699d92a4eecb750cc7abf95190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600173e18b3352f2cd1cf73caacadc742904e5e9bea3a390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061314f8061018e6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630323bd5814610117578063032c7c17146101b85780630f7ee1ec1461022957806316b09253146102ff5780631aa3a008146103645780631bdc619a146103935780631f3a12721461042b5780632156f3251461049a5780632813d19d1461053b578063365a5306146105a8578063410a557e146105ed57806341621c731461061c578063508e01e8146106975780635f5152261461072f578063b631498b14610786578063bd287b161461091a578063c7353faa1461098b578063ddc4b61d14610a2c578063ee786ada14610ab1578063fe5ff46814610b2a575b600080fd5b34801561012357600080fd5b5061019e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b81565b604051808215151515815260200191505060405180910390f35b3480156101c457600080fd5b5061020f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610c1e565b604051808215151515815260200191505060405180910390f35b34801561023557600080fd5b5061025460048036038101908080359060200190929190505050610d65565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018515151515815260200184151515158152602001838152602001821515151581526020019850505050505050505060405180910390f35b34801561030b57600080fd5b5061034a60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e23565b604051808215151515815260200191505060405180910390f35b34801561037057600080fd5b50610379611171565b604051808215151515815260200191505060405180910390f35b34801561039f57600080fd5b506103d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611278565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104175780820151818401526020810190506103fc565b505050509050019250505060405180910390f35b34801561043757600080fd5b5061048060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113fb565b604051808215151515815260200191505060405180910390f35b3480156104a657600080fd5b50610521600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506117d2565b604051808215151515815260200191505060405180910390f35b34801561054757600080fd5b506105666004803603810190808035906020019092919050505061186f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105b457600080fd5b506105d3600480360381019080803590602001909291905050506118ad565b604051808215151515815260200191505060405180910390f35b3480156105f957600080fd5b506106026119a6565b604051808215151515815260200191505060405180910390f35b34801561062857600080fd5b5061067d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050611ebf565b604051808215151515815260200191505060405180910390f35b3480156106a357600080fd5b506106d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061232a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561071b578082015181840152602081019050610700565b505050509050019250505060405180910390f35b34801561073b57600080fd5b50610770600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124ad565b6040518082815260200191505060405180910390f35b34801561079257600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612530565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561080f5780820151818401526020810190506107f4565b50505050905090810190601f16801561083c5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561087557808201518184015260208101905061085a565b50505050905090810190601f1680156108a25780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156108db5780820151818401526020810190506108c0565b50505050905090810190601f1680156109085780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561092657600080fd5b50610971600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050612722565b604051808215151515815260200191505060405180910390f35b34801561099757600080fd5b50610a12600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061294e565b604051808215151515815260200191505060405180910390f35b348015610a3857600080fd5b50610a9760048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190803590602001909291905050506129eb565b604051808215151515815260200191505060405180910390f35b348015610abd57600080fd5b50610b10600480360381019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ba6565b604051808215151515815260200191505060405180910390f35b348015610b3657600080fd5b50610b6b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613066565b6040518082815260200191505060405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515610bbd57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190610c1392919061307e565b506001905092915050565b600073b820b9f01be068e273ac75e530f1f55c70cc648d3373ffffffffffffffffffffffffffffffffffffffff16141515610c5857600080fd5b600115158215151415610cbb5782600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060019050610d5e565b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515610d595782600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019050610d5e565b600090505b9392505050565b600081815481101515610d7457fe5b90600052602060002090600702016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060160009054906101000a900460ff16905088565b600080600090505b600080549050811015611165578273ffffffffffffffffffffffffffffffffffffffff16600082815481101515610e5e57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610ed2575083600082815481101515610ebe57fe5b906000526020600020906007020160000154145b8015610f0f575060001515600082815481101515610eec57fe5b906000526020600020906007020160040160019054906101000a900460ff161515145b8015610fb95750600081815481101515610f2557fe5b906000526020600020906007020160030154600360008084815481101515610f4957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561115857600081815481101515610fcd57fe5b906000526020600020906007020160030154600360008084815481101515610ff157fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060008181548110151561107957fe5b90600052602060002090600702016003015460036000808481548110151561109d57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600160008281548110151561112757fe5b906000526020600020906007020160040160016101000a81548160ff0219169083151502179055506001915061116a565b8080600101915050610e2b565b600091505b5092915050565b600080600090505b6001805490508110156112095760018181548110151561119557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156111fc5760009150611274565b8080600101915050611179565b60013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600191505b5090565b60606000803373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415156112b757600080fd5b600090505b6000805490508110156113a2576000818154811015156112d857fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614801561136457506000808281548110151561134f57fe5b90600052602060002090600702016003015414155b1561139557818190806001815401808255809150509060018203906000526020600020016000909192909190915055505b80806001019150506112bc565b818054806020026020016040519081016040528092919081815260200182805480156113ed57602002820191906000526020600020905b8154815260200190600101908083116113d9575b505050505092505050919050565b600080600090505b6000805490508110156117c9573373ffffffffffffffffffffffffffffffffffffffff1660008281548110151561143657fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156114aa57508460008281548110151561149657fe5b906000526020600020906007020160000154145b801561152157508373ffffffffffffffffffffffffffffffffffffffff166000828154811015156114d757fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b801561154c57508260008281548110151561153857fe5b906000526020600020906007020160030154145b156117bc5782600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156115a157600091506117ca565b600080828154811015156115b157fe5b90600052602060002090600702016003018190555082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508260026000808481548110151561162657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600015156000828154811015156116b257fe5b906000526020600020906007020160040160019054906101000a900460ff16151514156117b35782600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508260036000808481548110151561173957fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b600191506117ca565b8080600101915050611403565b5b509392505050565b60003373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561180e57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061186492919061307e565b506001905092915050565b60018181548110151561187e57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561199b5782600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600191506119a0565b600091505b50919050565b60008073b820b9f01be068e273ac75e530f1f55c70cc648d3373ffffffffffffffffffffffffffffffffffffffff161415156119e157600080fd5b600090505b600080549050811015611eb757600081815481101515611a0257fe5b90600052602060002090600702016005015442118015611a42575060008082815481101515611a2d57fe5b90600052602060002090600702016003015414155b15611eaa57600081815481101515611a5657fe5b906000526020600020906007020160030154600260008084815481101515611a7a57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515611d855760008082815481101515611afe57fe5b906000526020600020906007020160030181905550600081815481101515611b2257fe5b906000526020600020906007020160030154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600081815481101515611b8f57fe5b906000526020600020906007020160030154600260008084815481101515611bb357fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060001515600082815481101515611c3f57fe5b906000526020600020906007020160040160019054906101000a900460ff1615151415611d8057600081815481101515611c7557fe5b906000526020600020906007020160030154600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600081815481101515611ce257fe5b906000526020600020906007020160030154600360008084815481101515611d0657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b611ea9565b60001515600082815481101515611d9857fe5b906000526020600020906007020160060160009054906101000a900460ff1615151415611ea8576001600082815481101515611dd057fe5b906000526020600020906007020160060160006101000a81548160ff021916908315150217905550600081815481101515611e0757fe5b906000526020600020906007020160030154600302600360008084815481101515611e2e57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b5b5b80806001019150506119e6565b600191505090565b600080600090505b60008054905081101561231c573373ffffffffffffffffffffffffffffffffffffffff16600082815481101515611efa57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611f6e575085600082815481101515611f5a57fe5b906000526020600020906007020160000154145b8015611f99575083600082815481101515611f8557fe5b906000526020600020906007020160030154145b801561201057508473ffffffffffffffffffffffffffffffffffffffff16600082815481101515611fc657fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b801561204c575082151560008281548110151561202957fe5b906000526020600020906007020160040160019054906101000a900460ff161515145b1561230f576000151560008281548110151561206457fe5b906000526020600020906007020160040160019054906101000a900460ff16151514156120cd57600160008281548110151561209c57fe5b906000526020600020906007020160040160006101000a81548160ff02191690831515021790555060019150612321565b6000818154811015156120dc57fe5b90600052602060002090600702016003015460036000808481548110151561210057fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561230e5760008181548110151561218357fe5b9060005260206000209060070201600301546003600080848154811015156121a757fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060008181548110151561222f57fe5b90600052602060002090600702016003015460036000808481548110151561225357fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060016000828154811015156122dd57fe5b906000526020600020906007020160040160006101000a81548160ff02191690831515021790555060019150612321565b5b8080600101915050611ec7565b600091505b50949350505050565b60606000803373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561236957600080fd5b600090505b6000805490508110156124545760008181548110151561238a57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614801561241657506000808281548110151561240157fe5b90600052602060002090600702016003015414155b1561244757818190806001815401808255809150509060018203906000526020600020016000909192909190915055505b808060010191505061236e565b8180548060200260200160405190810160405280929190818152602001828054801561249f57602002820191906000526020600020905b81548152602001906001019080831161248b575b505050505092505050919050565b60003373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415156124e957600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6004602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125dc5780601f106125b1576101008083540402835291602001916125dc565b820191906000526020600020905b8154815290600101906020018083116125bf57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561267a5780601f1061264f5761010080835404028352916020019161267a565b820191906000526020600020905b81548152906001019060200180831161265d57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127185780601f106126ed57610100808354040283529160200191612718565b820191906000526020600020905b8154815290600101906020018083116126fb57829003601f168201915b5050505050905083565b600073b820b9f01be068e273ac75e530f1f55c70cc648d3373ffffffffffffffffffffffffffffffffffffffff1614151561275c57600080fd5b60011515821515141561280c5782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060019050612947565b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561289a575082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156129425782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019050612947565b600090505b9392505050565b60003373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561298a57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190805190602001906129e092919061307e565b506001905092915050565b600080610100604051908101604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020016000151581526020018515158152602001844201815260200160001515815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060160006101000a81548160ff0219169083151502179055505050506001905095945050505050565b600080600090505b6000805490508110156130585785600082815481101515612bcb57fe5b906000526020600020906007020160000154148015612c5557503373ffffffffffffffffffffffffffffffffffffffff16600082815481101515612c0b57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8015612c92575060011515600082815481101515612c6f57fe5b906000526020600020906007020160040160009054906101000a900460ff161515145b1561304b5783600082815481101515612ca757fe5b9060005260206000209060070201600301541015612cc8576000915061305d565b83600082815481101515612cd857fe5b906000526020600020906007020160030160008282540392505081905550600061010060405190810160405280878152602001600084815481101515612d1a57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001868152602001600115158152602001600084815481101515612da157fe5b906000526020600020906007020160040160019054906101000a900460ff1615158152602001600084815481101515612dd657fe5b906000526020600020906007020160050154815260200160001515815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060160006101000a81548160ff02191690831515021790555050505060011515600082815481101515612f4157fe5b906000526020600020906007020160040160019054906101000a900460ff16151514156130425783600360008084815481101515612f7b57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b6001915061305d565b8080600101915050612bae565b600091505b50949350505050565b60036020528060005260406000206000915090505481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130bf57805160ff19168380011785556130ed565b828001600101855582156130ed579182015b828111156130ec5782518255916020019190600101906130d1565b5b5090506130fa91906130fe565b5090565b61312091905b8082111561311c576000816000905550600101613104565b5090565b905600a165627a7a72305820785c74558059c1f0b1d47322bab7c314fe313503872eafa081d5b7e4c413b4130029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"description_\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"updateCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"name\":\"rid\",\"type\":\"uint256\"},{\"name\":\"Debtor\",\"type\":\"address\"},{\"name\":\"Creditor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"confirmed\",\"type\":\"bool\"},{\"name\":\"evaluated\",\"type\":\"bool\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"violated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rid_\",\"type\":\"uint256\"},{\"name\":\"debtor_\",\"type\":\"address\"}],\"name\":\"evaluateReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"}],\"name\":\"checkReceiptCreditor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rid_\",\"type\":\"uint256\"},{\"name\":\"creditor_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"Caddr\",\"type\":\"string\"}],\"name\":\"setCompanyAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"companies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"loan\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoRepays\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rid_\",\"type\":\"uint256\"},{\"name\":\"sender_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"evaluated_\",\"type\":\"bool\"}],\"name\":\"confirmReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"}],\"name\":\"checkReceiptDebtor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Infos\",\"outputs\":[{\"name\":\"companyName\",\"type\":\"string\"},{\"name\":\"companyAddress\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"uodateBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setCompanyName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rid_\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"evaluated_\",\"type\":\"bool\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"makeReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rid_\",\"type\":\"uint256\"},{\"name\":\"newrid\",\"type\":\"uint256\"},{\"name\":\"newamount\",\"type\":\"uint256\"},{\"name\":\"newcreditor\",\"type\":\"address\"}],\"name\":\"transferReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_SETDESCRIPTION = "setDescription";

    public static final String FUNC_UPDATECREDIT = "updateCredit";

    public static final String FUNC_RECEIPTS = "receipts";

    public static final String FUNC_EVALUATERECEIPT = "evaluateReceipt";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_CHECKRECEIPTCREDITOR = "checkReceiptCreditor";

    public static final String FUNC_REPAY = "repay";

    public static final String FUNC_SETCOMPANYADRESS = "setCompanyAdress";

    public static final String FUNC_COMPANIES = "companies";

    public static final String FUNC_LOAN = "loan";

    public static final String FUNC_AUTOREPAYS = "autoRepays";

    public static final String FUNC_CONFIRMRECEIPT = "confirmReceipt";

    public static final String FUNC_CHECKRECEIPTDEBTOR = "checkReceiptDebtor";

    public static final String FUNC_CHECKBALANCE = "checkBalance";

    public static final String FUNC_INFOS = "Infos";

    public static final String FUNC_UODATEBALANCE = "uodateBalance";

    public static final String FUNC_SETCOMPANYNAME = "setCompanyName";

    public static final String FUNC_MAKERECEIPT = "makeReceipt";

    public static final String FUNC_TRANSFERRECEIPT = "transferReceipt";

    public static final String FUNC_CREDITS = "credits";

    @Deprecated
    protected Test(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Test(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Test(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Test(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> setDescription(String addr, String description_) {
        final Function function = new Function(
                FUNC_SETDESCRIPTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setDescription(String addr, String description_, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETDESCRIPTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description_)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setDescriptionSeq(String addr, String description_) {
        final Function function = new Function(
                FUNC_SETDESCRIPTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description_)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> updateCredit(String receiver, BigInteger amount_, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATECREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateCredit(String receiver, BigInteger amount_, Boolean add, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATECREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateCreditSeq(String receiver, BigInteger amount_, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATECREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple8<BigInteger, String, String, BigInteger, Boolean, Boolean, BigInteger, Boolean>> receipts(BigInteger param0) {
        final Function function = new Function(FUNC_RECEIPTS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<BigInteger, String, String, BigInteger, Boolean, Boolean, BigInteger, Boolean>>(
                new Callable<Tuple8<BigInteger, String, String, BigInteger, Boolean, Boolean, BigInteger, Boolean>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, BigInteger, Boolean, Boolean, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, BigInteger, Boolean, Boolean, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> evaluateReceipt(BigInteger rid_, String debtor_) {
        final Function function = new Function(
                FUNC_EVALUATERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(debtor_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void evaluateReceipt(BigInteger rid_, String debtor_, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_EVALUATERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(debtor_)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String evaluateReceiptSeq(BigInteger rid_, String debtor_) {
        final Function function = new Function(
                FUNC_EVALUATERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(debtor_)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> register() {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void register(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerSeq() {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> checkReceiptCreditor(String company) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTCREDITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void checkReceiptCreditor(String company, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTCREDITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String checkReceiptCreditorSeq(String company) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTCREDITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> repay(BigInteger rid_, String creditor_, BigInteger amount_) {
        final Function function = new Function(
                FUNC_REPAY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(creditor_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void repay(BigInteger rid_, String creditor_, BigInteger amount_, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REPAY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(creditor_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String repaySeq(BigInteger rid_, String creditor_, BigInteger amount_) {
        final Function function = new Function(
                FUNC_REPAY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(creditor_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setCompanyAdress(String addr, String Caddr) {
        final Function function = new Function(
                FUNC_SETCOMPANYADRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(Caddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCompanyAdress(String addr, String Caddr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCOMPANYADRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(Caddr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCompanyAdressSeq(String addr, String Caddr) {
        final Function function = new Function(
                FUNC_SETCOMPANYADRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(Caddr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> companies(BigInteger param0) {
        final Function function = new Function(FUNC_COMPANIES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> loan(BigInteger amount) {
        final Function function = new Function(
                FUNC_LOAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void loan(BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_LOAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String loanSeq(BigInteger amount) {
        final Function function = new Function(
                FUNC_LOAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> autoRepays() {
        final Function function = new Function(
                FUNC_AUTOREPAYS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void autoRepays(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AUTOREPAYS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String autoRepaysSeq() {
        final Function function = new Function(
                FUNC_AUTOREPAYS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> confirmReceipt(BigInteger rid_, String sender_, BigInteger amount_, Boolean evaluated_) {
        final Function function = new Function(
                FUNC_CONFIRMRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(sender_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(evaluated_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void confirmReceipt(BigInteger rid_, String sender_, BigInteger amount_, Boolean evaluated_, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CONFIRMRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(sender_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(evaluated_)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String confirmReceiptSeq(BigInteger rid_, String sender_, BigInteger amount_, Boolean evaluated_) {
        final Function function = new Function(
                FUNC_CONFIRMRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(sender_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(evaluated_)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> checkReceiptDebtor(String company) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTDEBTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void checkReceiptDebtor(String company, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTDEBTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String checkReceiptDebtorSeq(String company) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTDEBTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> checkBalance(String company) {
        final Function function = new Function(
                FUNC_CHECKBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void checkBalance(String company, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHECKBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String checkBalanceSeq(String company) {
        final Function function = new Function(
                FUNC_CHECKBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple3<String, String, String>> Infos(String param0) {
        final Function function = new Function(FUNC_INFOS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> uodateBalance(String receiver, BigInteger amount_, Boolean add) {
        final Function function = new Function(
                FUNC_UODATEBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uodateBalance(String receiver, BigInteger amount_, Boolean add, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UODATEBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uodateBalanceSeq(String receiver, BigInteger amount_, Boolean add) {
        final Function function = new Function(
                FUNC_UODATEBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setCompanyName(String addr, String name) {
        final Function function = new Function(
                FUNC_SETCOMPANYNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCompanyName(String addr, String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETCOMPANYNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCompanyNameSeq(String addr, String name) {
        final Function function = new Function(
                FUNC_SETCOMPANYNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> makeReceipt(BigInteger rid_, String receiver, BigInteger amount_, Boolean evaluated_, BigInteger time) {
        final Function function = new Function(
                FUNC_MAKERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(evaluated_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void makeReceipt(BigInteger rid_, String receiver, BigInteger amount_, Boolean evaluated_, BigInteger time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_MAKERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(evaluated_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String makeReceiptSeq(BigInteger rid_, String receiver, BigInteger amount_, Boolean evaluated_, BigInteger time) {
        final Function function = new Function(
                FUNC_MAKERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(receiver), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount_), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(evaluated_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferReceipt(BigInteger rid_, BigInteger newrid, BigInteger newamount, String newcreditor) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(newrid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(newamount), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(newcreditor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferReceipt(BigInteger rid_, BigInteger newrid, BigInteger newamount, String newcreditor, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(newrid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(newamount), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(newcreditor)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferReceiptSeq(BigInteger rid_, BigInteger newrid, BigInteger newamount, String newcreditor) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid_), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(newrid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(newamount), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(newcreditor)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> credits(String param0) {
        final Function function = new Function(FUNC_CREDITS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Test load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Test(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Test load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Test(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Test load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Test(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Test load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Test(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Test> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Test.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Test> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Test.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Test> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Test.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Test> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Test.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
